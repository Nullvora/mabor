name: CI

on:
  push:
    branches:
      - main
    paths:
      - 'Cargo.lock'
      - '**.rs'
      - '**.sh'
      - '**.ps1'
      - '**.yml'
      - '**.toml'
      - '!**.md'
      - '!LICENSE-APACHE'
      - '!LICENSE-MIT'
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'Cargo.lock'
      - '**.rs'
      - '**.sh'
      - '**.ps1'
      - '**.yml'
      - '**.toml'
      - '!**.md'
      - '!LICENSE-APACHE'
      - '!LICENSE-MIT'

env:
  # Note: It is not possible to define top level env vars and pass them to composite actions.
  # To work around this issue we use inputs and define all the env vars here.

  RUST_PREVIOUS_VERSION: 1.86.0

  # Cargo
  CARGO_TERM_COLOR: "always"

  # Dependency versioning
  # from wgpu repo: https://github.com/gfx-rs/wgpu/blob/trunk/.github/workflows/ci.yml

  # Sourced from https://vulkan.lunarg.com/sdk/home#linux
  VULKAN_SDK_VERSION: "1.3.268"

  # Sourced from https://archive.mesa3d.org/. Bumping this requires
  # updating the mesa build in https://github.com/gfx-rs/ci-build and creating a new release.
  MESA_VERSION: "24.2.3"
  # Corresponds to https://github.com/gfx-rs/ci-build/releases
  MESA_CI_BINARY_BUILD: "build19"

  # Sourced from https://www.nuget.org/packages/Microsoft.Direct3D.WARP
  WARP_VERSION: "1.0.13"
  # Sourced from https://github.com/microsoft/DirectXShaderCompiler/releases
  # Must also be changed in shaders.yaml
  DXC_RELEASE: "v1.8.2407"
  DXC_FILENAME: "dxc_2024_07_31_clang_cl.zip"

  # Mozilla Grcov
  GRCOV_LINK: "https://github.com/mozilla/grcov/releases/download"
  GRCOV_VERSION: "0.8.19"

  # Typos version
  TYPOS_LINK: "https://github.com/crate-ci/typos/releases/download"
  TYPOS_VERSION: "1.23.4"

  # GCP runners
  GCP_RUNNERS_IMAGE_FAMILY: "tracel-ci-ubuntu-2404-amd64-nvidia"
  GCP_RUNNERS_TYPE: "g2-standard-4"
  GCP_RUNNERS_ZONE: "us-east1-c"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare-checks:
    runs-on: ubuntu-latest
    outputs:
      rust-prev-version: ${{ env.RUST_PREVIOUS_VERSION }}
    steps:
      - name: Do Nothing
        if: false
        run: echo

  code-quality:
    runs-on: ubuntu-22.04
    needs: prepare-checks
    strategy:
      matrix:
        rust: [stable]
        include:
          - rust: stable
            toolchain: stable
    steps:
      - name: Setup Rust
        uses: tracel-ai/github-actions/setup-rust@v3
        with:
          rust-toolchain: ${{ matrix.toolchain }}
          cache-key: ${{ matrix.rust }}-linux
      # --------------------------------------------------------------------------------
      - name: Audit
        run: cargo xtask check audit
      # --------------------------------------------------------------------------------
      - name: Format
        shell: bash
        env:
          # work around for colors
          # see: https://github.com/rust-lang/rustfmt/issues/3385
          TERM: xterm-256color
        run: cargo xtask check format
      # --------------------------------------------------------------------------------
      - name: Lint
        run: cargo xtask check lint
      # --------------------------------------------------------------------------------
      - name: Typos
        uses: tracel-ai/github-actions/check-typos@v3

  documentation:
    runs-on: ubuntu-22.04
    needs: prepare-checks
    strategy:
      matrix:
        rust: [stable]
        include:
          - rust: stable
            toolchain: stable
    steps:
      - name: Setup Rust
        uses: tracel-ai/github-actions/setup-rust@v3
        with:
          rust-toolchain: ${{ matrix.toolchain }}
          cache-key: ${{ matrix.rust }}-linux
      # --------------------------------------------------------------------------------
      - name: Documentation Build
        run: cargo xtask doc build
      # --------------------------------------------------------------------------------
      - name: Documentation Tests
        run: cargo xtask doc tests

  ######################################################################################
  ## Disable CUDA tests for now, will be back soon
  ######################################################################################
  # linux-std-tests-gcp-launcher:
  #   needs: [prepare-checks, code-quality]
  #   runs-on: ubuntu-22.04
  #   strategy:
  #     matrix:
  #       rust: [stable]
  #       backend: [cuda]
  #       # backend: [cuda, vulkan]
  #   outputs:
  #     label_stable_cuda: ${{ steps.gen_output.outputs.label_stable_cuda }}
  #     # label_stable_vulkan: ${{ steps.gen_output.outputs.label_stable_vulkan }}
  #   steps:
  #     - name: Create runners
  #       id: create-runner
  #       uses: related-sciences/gce-github-runner@v0.14
  #       with:
  #         ephemeral: true
  #         image_family: ${{ env.GCP_RUNNERS_IMAGE_FAMILY }}
  #         image_project: ${{ secrets.GCP_CI_PROJECT_ID }}
  #         machine_type: ${{ env.GCP_RUNNERS_TYPE }}
  #         machine_zone: ${{ env.GCP_RUNNERS_ZONE }}
  #         maintenance_policy_terminate: true
  #         project_id: ${{ secrets.GCP_CI_PROJECT_ID }}
  #         service_account_key: ${{ secrets.GCP_SA_KEY }}
  #         token: ${{ secrets.GCE_GITHUB_RUNNER_GH_TOKEN }}
  #         vm_name_prefix: ${{ format('gce-gh-runner-linux-std-{0}-{1}-tests', matrix.rust, matrix.backend) }}
  #     # --------------------------------------------------------------------------------
  #     - name: Generate output
  #       id: gen_output
  #       run: |
  #         rust=${{ matrix.rust }}
  #         backend=${{ matrix.backend }}
  #         label=${{ steps.create-runner.outputs.label }}
  #         echo "label_${rust}_${backend}=${label}" >> "$GITHUB_OUTPUT"
  #     # --------------------------------------------------------------------------------
  #     # handle the case where we cancel the workflow while runners are being created
  #     - name: Install gcloud
  #       uses: google-github-actions/setup-gcloud@v2
  #       if: cancelled()
  #     # --------------------------------------------------------------------------------
  #     - name: Gcloud authentication
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: ${{ secrets.GCP_SA_KEY }}
  #         create_credentials_file: false
  #       if: cancelled()
  #     # --------------------------------------------------------------------------------
  #     - name: Make sure ephemeral runners are deleted
  #       if: cancelled()
  #       run: >
  #         gcloud compute instances delete
  #         --project ${{ secrets.GCP_CI_PROJECT_ID }}
  #         --zone ${{ env.GCP_RUNNERS_ZONE }}
  #         --quiet
  #         ${{ format('gce-gh-runner-linux-std-cuda-tests-{0}', matrix.rust) }}-${{ github.run_id }}-${{ github.run_attempt }}

  # linux-std-cuda-tests:
  #   needs: [prepare-checks, code-quality, linux-std-tests-gcp-launcher]
  #   runs-on: ${{ needs.linux-std-tests-gcp-launcher.outputs[format('label_{0}_cuda', matrix.rust)] }}
  #   env:
  #     LD_LIBRARY_PATH: '/usr/local/cuda/lib64'
  #     # disable incremental compilation (reduces artifact size)
  #     CARGO_PROFILE_TEST_INCREMENTAL: 'false'
  #   # Keep the stragegy to be able to easily add new rust versions if required
  #   strategy:
  #     matrix:
  #       rust: [stable]
  #       include:
  #         - rust: stable
  #           toolchain: stable
  #   steps:
  #     - name: Setup Rust
  #       uses: tracel-ai/github-actions/setup-rust@v3
  #       with:
  #         rust-toolchain: ${{ matrix.toolchain }}
  #         enable-cache: false
  #     # --------------------------------------------------------------------------------
  #     - name: Tests (burn-cuda)
  #       run: cargo xtask test --ci gcp-cuda-runner

  ######################################################################################
  ## Disable Vulkan tests as they are very long to run for now in GCP
  ######################################################################################
  # linux-std-vulkan-tests:
  #   needs: [prepare-checks, code-quality, linux-std-tests-gcp-launcher]
  #   runs-on: ${{ needs.linux-std-tests-gcp-launcher.outputs[format('label_{0}_vulkan', matrix.rust)] }}
  #   env:
  #     # disable incremental compilation (reduces artifact size)
  #     CARGO_PROFILE_TEST_INCREMENTAL: 'false'
  #   # Keep the stragegy to be able to easily add new rust versions if required
  #   strategy:
  #     matrix:
  #       rust: [stable]
  #       include:
  #         - rust: stable
  #           toolchain: stable
  #   steps:
  #     - name: Setup Rust
  #       uses: tracel-ai/github-actions/setup-rust@v3
  #       with:
  #         rust-toolchain: ${{ matrix.toolchain }}
  #         enable-cache: false
  #     # --------------------------------------------------------------------------------
  #     - name: Tests (burn-vulkan)
  #       run: cargo xtask test --ci gcp-vulkan-runner

  linux-std-tests:
    runs-on: ubuntu-22.04
    needs: [prepare-checks, code-quality]
    env:
      DISABLE_WGPU_SPIRV: '1'
      # disable incremental compilation (reduces artifact size)
      CARGO_PROFILE_TEST_INCREMENTAL: 'false'
    strategy:
      matrix:
        rust: [stable, prev]
        include:
          - rust: stable
            toolchain: stable
            coverage: --enable-coverage
          - rust: prev
            toolchain: ${{ needs.prepare-checks.outputs.rust-prev-version }}
    steps:
      - name: Setup Rust
        uses: tracel-ai/github-actions/setup-rust@v3
        with:
          rust-toolchain: ${{ matrix.toolchain }}
          cache-key: ${{ matrix.rust }}-linux
          # Disable cache on linux-std (stable) runner which currently always runs out of disk space with tests + coverage
          enable-cache: ${{ matrix.rust != 'stable' }}
      # --------------------------------------------------------------------------------
      - name: Setup Linux runner
        uses: tracel-ai/github-actions/setup-linux@v3
        with:
          vulkan-sdk-version: ${{ env.VULKAN_SDK_VERSION }}
          mesa-version: ${{ env.MESA_VERSION }}
          mesa-ci-build-version: ${{ env.MESA_CI_BINARY_BUILD }}
          cargo-package-to-clean: burn-tch
      # --------------------------------------------------------------------------------
      - name: Install grcov
        if: matrix.rust == 'stable'
        shell: bash
        run: |
          curl -L "$GRCOV_LINK/v$GRCOV_VERSION/grcov-x86_64-unknown-linux-musl.tar.bz2" |
          tar xj -C $HOME/.cargo/bin
          cargo xtask coverage install
      # --------------------------------------------------------------------------------
      - name: Tests
        run: cargo xtask ${{ matrix.coverage }} test --ci github-runner
      # --------------------------------------------------------------------------------
      - name: Generate lcov.info
        if: matrix.rust == 'stable'
        # /* is to exclude std library code coverage from analysis
        run: cargo xtask coverage generate --ignore "/*,xtask/*,examples/*"
      # --------------------------------------------------------------------------------
      - name: Codecov upload lcov.info
        if: matrix.rust == 'stable'
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}

  linux-no-std-tests:
    runs-on: ubuntu-22.04
    needs: [prepare-checks, code-quality]
    strategy:
      matrix:
        rust: [stable, prev]
        include:
          - rust: stable
            toolchain: stable
          - rust: prev
            toolchain: ${{ needs.prepare-checks.outputs.rust-prev-version }}
    steps:
      - name: Setup Rust
        uses: tracel-ai/github-actions/setup-rust@v3
        with:
          rust-toolchain: ${{ matrix.toolchain }}
          cache-key: ${{ matrix.rust }}-linux-no-std
      # --------------------------------------------------------------------------------
      - name: Setup Linux runner
        uses: tracel-ai/github-actions/setup-linux@v3
        with:
          vulkan-sdk-version: ${{ env.VULKAN_SDK_VERSION }}
          mesa-version: ${{ env.MESA_VERSION }}
          mesa-ci-build-version: ${{ env.MESA_CI_BINARY_BUILD }}
      # --------------------------------------------------------------------------------
      - name: Crates Build
        run: cargo xtask --execution-environment no-std build --ci
      # --------------------------------------------------------------------------------
      - name: Crates Tests
        run: cargo xtask --execution-environment no-std test --ci github-runner

  windows-std-tests:
    runs-on: windows-2022
    needs: [prepare-checks, code-quality]
    env:
      DISABLE_WGPU: '1'
    # Keep the stragegy to be able to easily add new rust versions if required
    strategy:
      matrix:
        rust: [stable]
        include:
          - rust: stable
            toolchain: stable
    steps:
      - name: Setup Rust
        uses: tracel-ai/github-actions/setup-rust@v3
        with:
          rust-toolchain: ${{ matrix.toolchain }}
          cache-key: ${{ matrix.rust }}-windows
      # --------------------------------------------------------------------------------
      - name: Setup Windows runner
        if: env.DISABLE_WGPU != '1'
        uses: tracel-ai/github-actions/setup-windows@v3
        with:
          dxc-release: ${{ env.DXC_RELEASE }}
          dxc-filename: ${{ env.DXC_FILENAME }}
          mesa-version: ${{ env.MESA_VERSION }}
          warp-version: ${{ env.WARP_VERSION }}
      # --------------------------------------------------------------------------------
      - name: Tests
        run: cargo xtask test --ci github-runner

  macos-std-tests:
    runs-on: blaze/macos-14
    needs: [prepare-checks, code-quality]
    # Keep the stragegy to be able to easily add new rust versions if required
    strategy:
      matrix:
        rust: [stable]
        include:
          - rust: stable
            toolchain: stable
    steps:
      - name: Setup Rust
        uses: tracel-ai/github-actions/setup-rust@v3
        with:
          rust-toolchain: ${{ matrix.toolchain }}
          cache-key: ${{ matrix.rust }}-macos
      # --------------------------------------------------------------------------------
      - name: Tests
        run: CUBECL_DEBUG_OPTION=profile cargo xtask test --ci github-runner
