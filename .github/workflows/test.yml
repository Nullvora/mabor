name: test

on:
  push:
    branches:
      - main
    paths:
      - '**.rs'
      - '**.sh'
      - '**.ps1'
      - '**.yml'
      - '**.toml'
      - '!**.md'
      - '!LICENSE-APACHE'
      - '!LICENSE-MIT'
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**.rs'
      - '**.sh'
      - '**.ps1'
      - '**.yml'
      - '**.toml'
      - '!**.md'
      - '!LICENSE-APACHE'
      - '!LICENSE-MIT'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [macos-13, ubuntu-22.04, windows-2022]
        # rust: [stable, 1.71.0]
        # test: ['std', 'no-std', 'examples']
        os: [ubuntu-22.04]
        rust: [stable]
        test: ['std']
        include:
          - cache: stable
            rust: stable
          # - cache: 1-71-0
          #   rust: 1.71.0
          # - os: ubuntu-22.04
          #   coverage-flags: COVERAGE=1
          #   rust: stable
          #   test: std
          # - os: macos-13
          #   rust: stable
          #   test: std
          # - os: windows-2022
          #   wgpu-flags: "DISABLE_WGPU=1"
          #   # not used yet, as wgpu tests are disabled on windows for now
          #   # see issue: https://github.com/tracel-ai/burn/issues/1062
          #   # auto-graphics-backend-flags: "AUTO_GRAPHICS_BACKEND=dx12";'
        # exclude:
        #   # only need to check this once
        #   - rust: 1.71.0
        #     test: 'examples'
        #   # Do not run no-std tests on macos
        #   - os: macos-13
        #     test: 'no-std'
        #   # Do not run no-std tests on Windows
        #   - os: windows-2022
        #     test: 'no-std'

    steps:

      - name: checkout
        uses: actions/checkout@v4

      - name: install rust
        uses: dtolnay/rust-toolchain@master
        with:
          components: rustfmt, clippy
          toolchain: ${{ matrix.rust }}

      # - name: caching
      #   uses: Swatinem/rust-cache@v2
      #   with:
      #     key: ${{ runner.os }}-${{ matrix.cache }}-${{ matrix.test}}-${{ hashFiles('**/Cargo.toml') }}
      #     prefix-key: "v5-rust"

      - name: free disk space
        if: runner.os == 'Linux'
        run: |
          df -h
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          df -h
          cargo clean --package burn-tch

      - name: install llvmpipe and lavapipe
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y -qq
          sudo add-apt-repository ppa:kisak/kisak-mesa -y
          sudo apt-get update
          sudo apt install -y libegl1-mesa libgl1-mesa-dri libxcb-xfixes0-dev mesa-vulkan-drivers

      - name: dummy wgpu tests --list
        run: cargo test -p burn-wgpu --color=always -- --list

      - name: wgpu tests
        # run: cargo test -p burn-wgpu --color=always -- --color=always --test-threads 1
        # run: cargo test tests::module -p burn-wgpu --color=always -- --color=always --test-threads 1
        # run: cargo test tests::matmul -p burn-wgpu --color=always -- --color=always --test-threads 1
        run: cargo test can_run_kernel -p burn-wgpu --color=always -- --color=always --test-threads 1

      # - name: Run cargo clippy for stable version
      #   if: runner.os == 'Linux' && matrix.rust == 'stable' && matrix.test == 'std'
      #   uses: giraffate/clippy-action@v1
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     # Run clippy for each workspace, targets, and featrues, considering
      #     # warnings as errors
      #     clippy_flags: --all-targets -- -Dwarnings
      #     # Do not filter results
      #     filter_mode: nofilter
      #     # Report clippy annotations as snippets
      #     reporter: github-pr-check

      # - name: Install grcov
      #   if: runner.os == 'Linux' && matrix.rust == 'stable' && matrix.test == 'std'
      #   env:
      #     GRCOV_LINK: https://github.com/mozilla/grcov/releases/download
      #     GRCOV_VERSION: v0.8.18
      #   run: |
      #     curl -L "$GRCOV_LINK/$GRCOV_VERSION/grcov-x86_64-unknown-linux-musl.tar.bz2" |
      #     tar xj -C $HOME/.cargo/bin

      # - name: (windows) install warp
      #   if: runner.os == 'Windows'
      #   shell: bash
      #   run: |
      #     set -e

      #     curl.exe -L https://www.nuget.org/api/v2/package/Microsoft.Direct3D.WARP/1.0.7.1 -o warp.zip
      #     7z.exe e warp.zip -owarp build/native/amd64/d3d10warp.dll

      #     mkdir -p target/debug/deps

      #     cp -v warp/d3d10warp.dll target/debug/
      #     cp -v warp/d3d10warp.dll target/debug/deps

      # - name: (windows) install mesa
      #   if: runner.os == 'Windows'
      #   shell: bash
      #   run: |
      #     set -e

      #     curl.exe -L https://github.com/pal1000/mesa-dist-win/releases/download/23.2.1/mesa3d-23.2.1-release-msvc.7z -o mesa.7z
      #     7z.exe e mesa.7z -omesa x64/{opengl32.dll,libgallium_wgl.dll,libglapi.dll,vulkan_lvp.dll,lvp_icd.x86_64.json}

      #     mkdir -p target/debug/deps

      #     cp -v mesa/* target/debug/
      #     cp -v mesa/* target/debug/deps

      #     echo "VK_DRIVER_FILES=$PWD/mesa/lvp_icd.x86_64.json" >> "$GITHUB_ENV"
      #     echo "GALLIUM_DRIVER=llvmpipe" >> "$GITHUB_ENV"

      # - name: (windows) install directx
      #   if: runner.os == 'Windows'
      #   uses: napokue/setup-dxc@v1.1.0

      # - name: run checks & tests
      #   shell: bash
      #   run: ${{ matrix.coverage-flags }} ${{ matrix.wgpu-flags }} cargo xtask run-checks ${{ matrix.test }}

      # - name: Codecov upload
      #   if: runner.os == 'Linux' && matrix.rust == 'stable' && matrix.test == 'std'
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: lcov.info

  check-typos:
    runs-on: ubuntu-22.04
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: caching
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-typos-${{ hashFiles('**/Cargo.toml') }}
          prefix-key: "v5-rust"

      - name: Install typos
        env:
          TYPOS_LINK: https://github.com/crate-ci/typos/releases/download
          TYPOS_VERSION: v1.16.20
        run: |
          curl -L "$TYPOS_LINK/$TYPOS_VERSION/typos-$TYPOS_VERSION-x86_64-unknown-linux-musl.tar.gz" |
          tar xz -C $HOME/.cargo/bin

      - name: run spelling checks using typos
        run: cargo xtask run-checks typos
