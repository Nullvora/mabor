#[burn_tensor_testgen::testgen(module_fft)]
mod tests {
    use super::*;
    use burn_tensor::module::{fft, ifft};
    use burn_tensor::Shape;

    fn single_elem() -> (TestTensor<3>, TestTensor<3>) {
        (
            TestTensor::from([[[1., 0.]]]),
            TestTensor::from([[[1., 0.]]]),
        )
    }

    fn delta_1d() -> (TestTensor<3>, TestTensor<3>) {
        (
            // Delta function -> Flat frequency spectrum
            TestTensor::from([[[1., 0.], [0., 0.]], [[0., 1.], [0., 0.]]]),
            TestTensor::from([[[1., 0.], [1., 0.]], [[0., 1.], [0., 1.]]]),
        )
    }

    fn simple_1d() -> (TestTensor<3>, TestTensor<3>) {
        (
            TestTensor::from([[[1., 3.], [2.3, -1.]], [[-1., 0.], [-1., 0.]]]),
            TestTensor::from([[[3.3, 2.0], [-1.3, 4.0]], [[-2.0, 0.0], [0.0, 0.0]]]),
        )
    }

    fn even_pow_2_1d() -> (TestTensor<3>, TestTensor<3>) {
        // FFT size 2^4 = 16
        (
            TestTensor::from([[
                [-0.2322, -0.8782],
                [0.0283, 0.0621],
                [0.6704, 0.9188],
                [-0.6543, 0.9008],
                [0.4139, 0.7885],
                [0.5795, 0.8549],
                [0.1336, 1.4838],
                [0.0967, 0.0182],
                [-0.2705, -1.6957],
                [1.2414, -0.0782],
                [1.0207, -1.2235],
                [1.0662, 1.0242],
                [0.5177, -0.1858],
                [-0.4157, 0.1690],
                [-0.5877, 0.9780],
                [1.0103, -0.9347],
            ]]),
            TestTensor::from([[
                [4.6184, 2.2021],
                [1.7495, 2.2396],
                [-1.6534, -8.3570],
                [4.8833, 1.4184],
                [-0.8089, -4.0430],
                [-1.7017, 1.2770],
                [1.3325, 1.4228],
                [-1.3123, 4.6775],
                [-1.2865, -1.8301],
                [2.5052, 1.3927],
                [-6.7483, -2.2867],
                [-1.4950, -2.8296],
                [-0.8072, -4.2135],
                [1.4975, -1.2243],
                [1.3319, -3.4857],
                [-5.8203, -0.4112],
            ]]),
        )
    }

    fn odd_pow_2_1d() -> (TestTensor<3>, TestTensor<3>) {
        // FFT size 2^5 = 32
        (
            TestTensor::from([
                [
                    [0.0427, -0.9848],
                    [0.6244, 0.0441],
                    [0.2514, 1.2113],
                    [0.9988, 1.5251],
                    [-0.0979, 0.3475],
                    [0.6723, -1.9583],
                    [0.4330, -0.4186],
                    [0.2924, -0.1259],
                    [-0.9504, -0.9404],
                    [-0.8480, -1.4261],
                    [1.6096, -1.6685],
                    [-0.4452, -0.2472],
                    [-0.7371, 1.9884],
                    [0.4746, 0.9134],
                    [0.3894, -0.7379],
                    [-0.8402, -0.6750],
                    [-1.2116, -0.0552],
                    [-0.5223, 0.7814],
                    [1.6739, -0.8242],
                    [0.8573, 0.3881],
                    [-0.0345, 1.4219],
                    [0.1038, 1.9030],
                    [-0.3701, 1.0827],
                    [-0.7380, 1.3959],
                    [1.2852, -1.1371],
                    [0.4140, -0.2322],
                    [-0.0631, 1.0053],
                    [-0.3737, 0.2743],
                    [2.1822, 0.7284],
                    [0.6077, 1.2214],
                    [-0.3532, -0.6910],
                    [-0.5390, -0.0049],
                ],
                [
                    [0.7324, -0.7980],
                    [0.8606, -1.7983],
                    [0.4761, 0.5743],
                    [0.1872, 1.0686],
                    [0.3460, -0.2946],
                    [0.9188, -1.6348],
                    [-0.5201, 0.2241],
                    [-1.8877, 0.9795],
                    [0.4466, -0.5693],
                    [1.8571, 0.6358],
                    [-1.0278, 0.9778],
                    [-0.5889, 0.1738],
                    [-0.2158, -0.3417],
                    [1.3702, 1.5540],
                    [0.8480, -1.5970],
                    [0.9213, -0.8815],
                    [0.3899, -0.2117],
                    [1.1022, -0.5712],
                    [-1.2964, -1.4468],
                    [-0.0170, -0.6138],
                    [-0.4706, 0.5001],
                    [0.0794, -1.2067],
                    [1.1162, -0.6329],
                    [0.1651, 0.1031],
                    [0.3490, -0.2715],
                    [0.6509, 0.0565],
                    [1.0147, 0.2431],
                    [0.8052, -0.9913],
                    [0.9142, 0.9090],
                    [1.0906, 0.5651],
                    [1.5763, 0.5397],
                    [0.3499, 0.4359],
                ],
            ]),
            TestTensor::from([
                [
                    [4.7884, 4.1050],
                    [-5.4979, 0.9704],
                    [2.2100, 0.8929],
                    [3.2625, 4.2363],
                    [-6.3352, -14.4654],
                    [7.1075, 0.2420],
                    [2.7235, -4.1024],
                    [-3.3785, -15.7396],
                    [-4.3761, 0.0957],
                    [6.6426, 3.5467],
                    [2.1965, 6.7494],
                    [-5.0247, 1.5957],
                    [-0.1676, -1.6919],
                    [-1.9747, -4.9014],
                    [-1.8878, -5.7946],
                    [-4.8639, -2.0970],
                    [3.3108, -3.4494],
                    [1.8428, 3.2496],
                    [-2.1688, 2.2887],
                    [1.8962, -0.4687],
                    [3.0188, -7.4876],
                    [-1.5869, 5.1769],
                    [0.1114, 3.9235],
                    [7.7439, -6.9099],
                    [-1.8084, 4.7236],
                    [11.4196, -0.7087],
                    [-12.0418, 0.5287],
                    [-3.4558, -2.9853],
                    [-5.1034, -6.7704],
                    [-6.3451, 2.8732],
                    [-3.1719, 3.8135],
                    [12.2821, -2.9533],
                ],
                [
                    [12.5437, -4.3209],
                    [6.6402, 7.5440],
                    [-1.5249, 1.4718],
                    [-3.2183, -1.4000],
                    [1.8995, -0.0458],
                    [-5.3435, -6.2148],
                    [-1.4322, -2.0123],
                    [2.7689, -3.0387],
                    [-2.3689, -7.9545],
                    [-13.4452, -4.8216],
                    [0.6306, 10.9365],
                    [-0.9051, 0.5564],
                    [-1.9752, -7.8168],
                    [2.5935, 0.0319],
                    [-4.3665, -0.1909],
                    [7.7858, 1.6211],
                    [-3.1862, -0.0701],
                    [1.0940, 5.9505],
                    [0.8552, -0.3137],
                    [-1.4151, -1.5680],
                    [4.4181, 2.5067],
                    [2.9776, -3.9427],
                    [-0.6781, 7.6331],
                    [2.0782, 0.4852],
                    [2.9787, 8.0347],
                    [5.6104, -9.2327],
                    [-0.1015, -9.4777],
                    [-3.1915, 0.0535],
                    [1.0344, -5.1372],
                    [0.2312, 5.2132],
                    [9.2310, -9.3980],
                    [1.2195, -0.6194],
                ],
            ]),
        )
    }

    fn reshaped_input_1d() -> (TestTensor<3>, TestTensor<3>) {
        // "Reshape" might just changes strides, and not alter underlying buffer.
        //  This test ensures op is correctly using stride info.
        let x1 = TestTensor::<1>::from([
            0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15.,
        ]);
        let x3: TestTensor<3> = x1.reshape([2, 4, 2]).swap_dims(0, 2);

        let x_hat = TestTensor::from([
            [
                [8., 0., -8., 0.],
                [12., 0., -8., 0.],
                [16., 0., -8., 0.],
                [20., 0., -8., 0.],
            ],
            [
                [10., 0., -8., 0.],
                [14., 0., -8., 0.],
                [18., 0., -8., 0.],
                [22., 0., -8., 0.],
            ],
        ]);

        (x3, x_hat)
    }

    #[test]
    fn test_fft_single_elem() {
        let (x, x_hat) = single_elem();
        assert_output(fft(x), x_hat);
    }

    #[test]
    fn test_ifft_single_elem() {
        let (x, x_hat) = single_elem();
        assert_output(x, ifft(x_hat));
    }

    #[test]
    fn test_fft_delta_1d() {
        let (x, x_hat) = delta_1d();
        assert_output(fft(x), x_hat);
    }

    #[test]
    fn test_ifft_delta_1d() {
        let (x, x_hat) = delta_1d();
        assert_output(x, ifft(x_hat));
    }

    #[test]
    fn test_fft_simple_1d() {
        let (x, x_hat) = simple_1d();
        assert_output(fft(x), x_hat);
    }

    #[test]
    fn test_ifft_simple_1d() {
        let (x, x_hat) = simple_1d();
        assert_output(x, ifft(x_hat));
    }

    #[test]
    fn test_fft_even_pow_2_1d() {
        let (x, x_hat) = even_pow_2_1d();
        assert_output(fft(x), x_hat);
    }

    #[test]
    fn test_ifft_even_pow_2_1d() {
        let (x, x_hat) = even_pow_2_1d();
        assert_output(x, ifft(x_hat));
    }

    #[test]
    fn test_fft_odd_pow_2_1d() {
        let (x, x_hat) = odd_pow_2_1d();
        assert_output(fft(x), x_hat);
    }

    #[test]
    fn test_ifft_odd_pow_2_1d() {
        let (x, x_hat) = odd_pow_2_1d();
        assert_output(x, ifft(x_hat));
    }

    #[test]
    fn test_fft_round_trip_precision() {
        let shape_x = Shape::new([1, 16, 2]);
        let x = TestTensor::from(
            TestTensorInt::arange(0..shape_x.num_elements() as i64, &Default::default())
                .reshape(shape_x)
                .into_data()
                .convert(),
        );

        // 2^10 shape = 9 iterations each way, can accumulate considerable error.
        assert_output(x.clone(), ifft(fft(x)));
    }

    #[test]
    #[should_panic]
    fn test_invalid_input_non_complex_structure() {
        // Last dim must have dimension 2 (real, imaginary)
        let x = TestTensor::from([[[0., 0., 0.], [0., 0., 0.]]]);
        fft(x);
    }

    #[test]
    #[should_panic]
    fn test_invalid_input_non_pow_2() {
        let x = TestTensor::from([[[0., 1.], [2., 3.], [4., 5.]]]);
        fft(x);
    }

    fn assert_output(x: TestTensor<3>, y: TestTensor<3>) {
        x.to_data().assert_approx_eq(&y.into_data(), 3);
    }
}
