// Generated by integration tests
use burn::{
    module::Module,
    tensor::{backend::Backend, Tensor},
};


#[derive(Module, Debug)]
pub struct Model<B: Backend> {
    _dummy: Tensor<B, 1>,
}

impl<B: Backend> Model<B> {
    pub fn new_with(_record: ModelRecord<B>) -> Self {
        Self {
            _dummy: Tensor::zeros([1]),
        }
    }

    #[allow(clippy::let_and_return)]
    pub fn forward(&self, input1: Tensor<B, 4>) -> Tensor<B, 4> {
        let concat1_out1 = burn::tensor::Tensor::cat(vec![input1.clone(), input1.clone()], 1);
        let concat2_out1 = burn::tensor::Tensor::cat(
            vec![
                input1,
                concat1_out1.clone(),
                concat1_out1.clone(),
                concat1_out1.clone(),
                concat1_out1,
            ],
            1,
        );
        concat2_out1
    }
}
