// Generated by integration tests
use burn::nn::conv::Conv2d;
use burn::nn::conv::Conv2dConfig;
use burn::nn::PaddingConfig2d;
use burn::{
    module::Module,
    tensor::{backend::Backend, Tensor},
};


#[derive(Module, Debug)]
pub struct Model<B: Backend> {
    conv2d1: Conv2d<B>,
}

impl<B: Backend> Model<B> {
    pub fn new_with(record: ModelRecord<B>) -> Self {
        let conv2d1 = Conv2dConfig::new([8, 36], [3, 5])
            .with_stride([2, 1])
            .with_padding(PaddingConfig2d::Explicit(4, 2))
            .with_dilation([3, 1])
            .with_groups(2)
            .with_bias(true)
            .init_with(record.conv2d1);
        Self { conv2d1 }
    }

    #[allow(clippy::let_and_return)]
    pub fn forward(&self, input1: Tensor<B, 4>) -> Tensor<B, 4> {
        let conv2d1_out1 = self.conv2d1.forward(input1);
        conv2d1_out1
    }
}
